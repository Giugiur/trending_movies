// Mocks generated by Mockito 5.0.15 from annotations
// in trending_movies/test/widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:trending_movies/movies/movie.dart' as _i4;
import 'package:trending_movies/movies/movies_provider.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [Movies].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovies extends _i1.Mock implements _i2.Movies {
  MockMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get currentPage =>
      (super.noSuchMethod(Invocation.getter(#currentPage), returnValue: 0)
          as int);
  @override
  int get maxPages =>
      (super.noSuchMethod(Invocation.getter(#maxPages), returnValue: 0) as int);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i3.Future<List<_i4.Movie>> fetchMovies() =>
      (super.noSuchMethod(Invocation.method(#fetchMovies, []),
              returnValue: Future<List<_i4.Movie>>.value(<_i4.Movie>[]))
          as _i3.Future<List<_i4.Movie>>);
  @override
  String toString() => super.toString();
  @override
  void addListener(_i5.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
